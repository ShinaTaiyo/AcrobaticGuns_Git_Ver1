//=============================================================================
//
// サウンド処理 [sound.h]
// Author : AKIRA TANAKA
//
//=============================================================================
#ifndef _SOUND_H_
#define _SOUND_H_

#include "main.h"

//==============================================================================
//サウンドクラス
//==============================================================================
class CSound
{
public:
	//==============================================================================
	// サウンド一覧
    //==============================================================================
    enum class SOUND_LABEL
	{
		BGM_NOESIS,       //Noesis
	    SE_SHOT_000,      //射撃０
		SE_SHOT_001,      //射撃１
	    SE_EXPLOSION_000, //爆発０
		SE_DAMAGE_000,    //ダメージ０
		MAX,
	};
	//=================================================================================================================================

	//*****************************************************************************
	// プロトタイプ宣言
	//*****************************************************************************
	CSound();                            //コンストラクタ
	~CSound();                           //デストラクタ
	HRESULT InitSound(HWND hWnd);        //初期化処理
	void UninitSound(void);              //終了処理
	HRESULT PlaySound(SOUND_LABEL label);//サウンド再生処理
	void StopSound(SOUND_LABEL label);   //サウンドストップ処理
	void StopSound(void);                //サウンドストップ処理（オーバーロード）
	//=================================================================================================================================

private:
	//*****************************************************************************
	// プロトタイプ宣言
	//*****************************************************************************
	HRESULT CheckChunk(HANDLE hFile, DWORD format, DWORD* pChunkSize, DWORD* pChunkDataPosition);
	HRESULT ReadChunkData(HANDLE hFile, void* pBuffer, DWORD dwBuffersize, DWORD dwBufferoffset);
	//=================================================================================================================================

		//*****************************************************************************
        // サウンド情報の構造体定義
        //*****************************************************************************
		typedef struct
		{
			const char* pFilename;	// ファイル名
			int nCntLoop;		// ループカウント
		} SOUNDINFO;

		//*****************************************************************************
		// グローバル変数
		//*****************************************************************************
		IXAudio2* m_pXAudio2 = NULL;								                // XAudio2オブジェクトへのインターフェイス!
		IXAudio2MasteringVoice* m_pMasteringVoice = NULL;			                // マスターボイス!
		IXAudio2SourceVoice* m_apSourceVoice[static_cast<int>(SOUND_LABEL::MAX)];	// ソースボイス!
		BYTE* m_apDataAudio[static_cast<int>(SOUND_LABEL::MAX)];					// オーディオデータ!
		DWORD m_aSizeAudio[static_cast<int>(SOUND_LABEL::MAX)];					    // オーディオデータサイズ!

		// サウンドの情報
		SOUNDINFO m_aSoundInfo[static_cast<int>(SOUND_LABEL::MAX)] =
		{
			{"data/BGM/TitleBgm_Noesis.wav", -1},   //BGM_Noesis
			{"data/SE/Shot_000.wav",  0},           //SE_射撃０
			{"data/SE/Shot_001.wav",  0},           //SE_射撃０
			{"data/SE/Explosion_000.wav",  0},      //SE_爆発０
			{"data/SE/Damage_000.wav",  0},         //SE_ダメージ０
		};

};

#endif
