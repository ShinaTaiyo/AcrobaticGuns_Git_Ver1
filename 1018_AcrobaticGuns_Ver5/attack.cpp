//======================================================================================================================
//
//１０月２４日：攻撃用のクラスを作る[attack.cpp]
//Author:ShinaTaiyo
//
//======================================================================================================================

//==================================================================
//インクルード
//==================================================================
#include "attack.h"
#include "manager.h"
#include "objectXInfo.h"
//======================================================================================================================

//==================================================================
//前方宣言
//==================================================================
const string CAttack::ATTACK_FILENAME[CAttack::ATTACKTYPE::TYPE_MAX] =
{
	"data\\MODEL\\Attack\\Fire_000.x"
};
//======================================================================================================================

//==================================================================
//コンストラクタ
//==================================================================
CAttack::CAttack() : m_Type(ATTACKTYPE::TYPE00_BULLET)
{

}
//======================================================================================================================

//==================================================================
//デストラクタ
//==================================================================
CAttack::~CAttack()
{

}
//======================================================================================================================

//==================================================================
//初期化処理
//==================================================================
HRESULT CAttack::Init()
{
	CObjectXAlive::Init();
	return S_OK;
}
//======================================================================================================================

//==================================================================
//終了処理
//==================================================================
void CAttack::Uninit()
{
	CObjectXAlive::Uninit();
}
//======================================================================================================================

//==================================================================
//更新処理
//==================================================================
void CAttack::Update()
{
	CObjectXAlive::Update();
}
//======================================================================================================================

//==================================================================
//描画処理
//==================================================================
void CAttack::Draw()
{
	CObjectXAlive::Draw();
}
//======================================================================================================================

//==================================================================
//死亡フラグ設定処理
//==================================================================
void CAttack::SetDeath()
{
	CObject::SetDeath();
}
//======================================================================================================================

//==================================================================
//生成処理
//==================================================================
CAttack* CAttack::Create(ATTACKTYPE AttackType, int nLife, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 move, D3DXVECTOR3 Scale)
{
	CAttack* pAttack = DBG_NEW CAttack;     //生成

	pAttack->Init();                        //初期化処理
	pAttack->SetType(CObject::TYPE::ATTACK); //オブジェクトごとのタイプを設定する
	pAttack->SetAttackType(AttackType);     //攻撃の種類を設定する
	pAttack->SetLife(nLife);                //体力を設定
	pAttack->SetMaxLife(nLife);             //最大体力を設定
	pAttack->SetPos(pos);                   //位置  
	pAttack->SetRot(rot);                   //向き
	pAttack->SetMove(move);                 //移動量
	pAttack->SetScale(Scale);               //拡大率

	//モデル情報設定
	int nIdx = CManager::GetObjectXInfo()->Regist(ATTACK_FILENAME[AttackType]);

	//モデル情報を割り当てる
	pAttack->BindObjectXInfo(CManager::GetObjectXInfo()->GetMesh(nIdx),
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),
		CManager::GetObjectXInfo()->GetTexture(nIdx),
		CManager::GetObjectXInfo()->GetColorValue(nIdx));


	return pAttack;
}
//======================================================================================================================

//=============================================================================プレイヤー攻撃クラス=============================================================================

//==================================================================
//コンストラクタ
//==================================================================
CAttackPlayer::CAttackPlayer()
{

}
//======================================================================================================================

//==================================================================
//デストラクタ
//==================================================================
CAttackPlayer::~CAttackPlayer()
{

}
//======================================================================================================================

//==================================================================
//初期化処理
//==================================================================
HRESULT CAttackPlayer::Init()
{
	CAttack::Init();
	return S_OK;
}
//======================================================================================================================

//==================================================================
//終了処理
//==================================================================
void CAttackPlayer::Uninit()
{
	CAttack::Uninit();
}
//======================================================================================================================

//==================================================================
//更新処理
//==================================================================
void CAttackPlayer::Update()
{
	CAttack::Update();
}
//======================================================================================================================

//==================================================================
//描画処理
//==================================================================
void CAttackPlayer::Draw()
{
	CAttack::Draw();
}
//======================================================================================================================

//==================================================================
//死亡フラグ設定処理
//==================================================================
void CAttackPlayer::SetDeath()
{
	CAttack::SetDeath();
}
//======================================================================================================================

//==================================================================
//生成処理
//==================================================================
CAttackPlayer* CAttackPlayer::Create(ATTACKTYPE AttackType, int nLife, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 move, D3DXVECTOR3 Scale)
{
	CAttackPlayer* pAttackPlayer = DBG_NEW CAttackPlayer;     //生成

	pAttackPlayer->Init();                        //初期化処理
	pAttackPlayer->SetType(CObject::TYPE::ATTACK); //オブジェクトごとのタイプを設定する
	pAttackPlayer->SetAttackType(AttackType);     //攻撃の種類を設定する
	pAttackPlayer->SetLife(nLife);                //体力を設定
	pAttackPlayer->SetMaxLife(nLife);             //最大体力を設定
	pAttackPlayer->SetPos(pos);                   //位置  
	pAttackPlayer->SetRot(rot);                   //向き
	pAttackPlayer->SetMove(move);                 //移動量
	pAttackPlayer->SetScale(Scale);               //拡大率

	//モデル情報設定
	int nIdx = CManager::GetObjectXInfo()->Regist(ATTACK_FILENAME[AttackType]);

	//モデル情報を割り当てる
	pAttackPlayer->BindObjectXInfo(CManager::GetObjectXInfo()->GetMesh(nIdx),
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),
		CManager::GetObjectXInfo()->GetTexture(nIdx),
		CManager::GetObjectXInfo()->GetColorValue(nIdx));

	return pAttackPlayer;
}
//======================================================================================================================

//=============================================================================敵攻撃クラス=============================================================================

//==================================================================
//コンストラクタ
//==================================================================
CAttackEnemy::CAttackEnemy()
{

}
//======================================================================================================================

//==================================================================
//デストラクタ
//==================================================================
CAttackEnemy::~CAttackEnemy()
{

}
//======================================================================================================================

//==================================================================
//初期化処理
//==================================================================
HRESULT CAttackEnemy::Init()
{
	CAttack::Init();
	return S_OK;
}
//======================================================================================================================

//==================================================================
//終了処理
//==================================================================
void CAttackEnemy::Uninit()
{
	CAttack::Uninit();
}
//======================================================================================================================

//==================================================================
//更新処理
//==================================================================
void CAttackEnemy::Update()
{
	CAttack::Update();
}
//======================================================================================================================

//==================================================================
//描画処理
//==================================================================
void CAttackEnemy::Draw()
{
	CAttack::Draw();
}
//======================================================================================================================

//==================================================================
//死亡フラグ設定処理
//==================================================================
void CAttackEnemy::SetDeath()
{
	CAttack::SetDeath();
}
//======================================================================================================================

//==================================================================
//生成処理
//==================================================================
CAttackEnemy* CAttackEnemy::Create(ATTACKTYPE AttackType, int nLife, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 move, D3DXVECTOR3 Scale)
{
	CAttackEnemy* pAttackEnemy = DBG_NEW CAttackEnemy;     //生成

	pAttackEnemy->Init();                        //初期化処理
	pAttackEnemy->SetType(CObject::TYPE::ATTACK); //オブジェクトごとのタイプを設定する
	pAttackEnemy->SetAttackType(AttackType);     //攻撃の種類を設定する
	pAttackEnemy->SetLife(nLife);                //体力を設定
	pAttackEnemy->SetMaxLife(nLife);             //最大体力を設定
	pAttackEnemy->SetPos(pos);                   //位置  
	pAttackEnemy->SetRot(rot);                   //向き
	pAttackEnemy->SetMove(move);                 //移動量
	pAttackEnemy->SetScale(Scale);               //拡大率

		//モデル情報設定
	int nIdx = CManager::GetObjectXInfo()->Regist(ATTACK_FILENAME[AttackType]);

	//モデル情報を割り当てる
	pAttackEnemy->BindObjectXInfo(CManager::GetObjectXInfo()->GetMesh(nIdx),
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),
		CManager::GetObjectXInfo()->GetTexture(nIdx),
		CManager::GetObjectXInfo()->GetColorValue(nIdx));
	return pAttackEnemy;
}
//======================================================================================================================