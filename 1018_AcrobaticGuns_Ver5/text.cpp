//============================================================================================
//
//リザルト表示する処理[Text.cpp]
// Author seiya kagaya
//
//============================================================================================
#include <stdarg.h>  // 可変長引数関連のヘッダ
#include "text.h"
#include "manager.h"
#include "renderer.h"
#include <stdio.h>

//============================================
//静的メンバ宣言
//============================================
const CText::FONTINFO CText::m_FontInfo[CText::FONT_MAX] = 
	{
		{"data\\FONT\\DokiDokiFantasia.otf", "どきどきファンタジア"},
		{ "data\\FONT\\akabara-cinderella.ttf", "赤薔薇シンデレラ" },
		{ "data\\FONT\\keifont.ttf", "けいふぉんと" },
		{ "data\\FONT\\SoukouMincho.ttf", "装甲明朝" },
		{ "data\\FONT\\kiraraji04.ttf", "きらら字04" },
	};
//=============================================================================================

//==================================================================
//コンストラクタ
//==================================================================
CText::CText() : m_pFont_Comment()
{

}
//=========================================================================================================================================

//==================================================================
//デストラクタ
//==================================================================
CText::~CText()
{
}

//==================================================================
//初期化処理
//==================================================================
void CText::Init(void)
{
	Uninit();

	//フォントの読み込みテスト//
	for (int nCnt = 0; nCnt < FONT_MAX; nCnt++)
	{
		LPCSTR font_path = m_FontInfo[nCnt].pFilePass; // ここで各フォントを使用可能に（椎名コメント：何故データ型？）


		//==============================================
		// 椎名コメント（AddFontResourceExについて)
		//==============================================
		//・第一引数LPCSTRは、データ型（const * char)と同義
		//・第二引数は、FP_PRIVATE、又は、FM_NOT_ENUMを設定出来る。
	    // →FM_PRIVATEは、関数を呼び出したプロセスのみがこのフォントを使用できることを指定する。 フォント名がパブリック フォントと一致すると、
        //プライベート フォントが選択。 プロセスが終了すると、 AddFontResourceEx 関数を使用して、
		//プロセスによってインストールされたすべてのフォントが削除される。
		// FR_NOT_ENUM
		//→AddFontResourceEx 関数を呼び出したプロセスを含め、このフォントを列挙できるプロセスがないことを指定する。
		//・第三引数は、０を指定。
		//・戻り値について
		//→関数が成功した場合、戻り値は追加されたフォントの数を指定する。関数が失敗した場合は、0 を返す。 拡張エラー情報は使用できない。
		///=================================================================================================================================================

		if (AddFontResourceEx(font_path, FR_PRIVATE, NULL) > 0)
		{
		}
		else
		{
			//フォント読込エラー処理
			MessageBox(NULL, "フォント読込失敗", "", MB_OK);
		}
	}
}

//==================================================================
//終了処理
//==================================================================
void CText::Uninit(void)
{
	for (int nCnt = 0; nCnt < MAXFONT; nCnt++)
	{
		//UIComment表示用フォントの破棄
		if (m_pFont_Comment[nCnt] != NULL)
		{
			m_pFont_Comment[nCnt]->Release();
			m_pFont_Comment[nCnt] = NULL;
		}
	}
}

//==================================================================
//UIコメント表示処理
//==================================================================
void CText::DrawSet(D3DXVECTOR3 DrawPos, int FontSize, FONT Font, D3DXCOLOR RGBA, const char* Text, ...)
{
	//...は可変長引数（Variable Arguments）

	 //初期化大事　（椎名コメント）毎回初期化することによって、呼ばれる度に表示するコメントを変える？（Question)
	if (m_pFont_Comment[Font] != nullptr)
	{
		m_pFont_Comment[Font]->Release();
		m_pFont_Comment[Font] = nullptr;
	}

	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();//（椎名コメント）デバイスの取得

	RECT rect = { (long)(DrawPos.x),(long)(DrawPos.y),SCREEN_WIDTH,SCREEN_HEIGHT };//（椎名コメント）四角形の中に文字を設定する？
	char aStr[1024];

	D3DXCreateFont(pDevice,              //（椎名コメント）デバイスへのポインタ 
		FontSize,                        //（椎名コメント）文字の高さ
		0,                               //（椎名コメント）文字の横幅 
		FW_HEAVY,                        //（椎名コメント）文字の太さ
		1,                               //（椎名コメント）下線
		FALSE,                           //（椎名コメント）斜体
		DEFAULT_CHARSET,                 //（椎名コメント）文字セット
		OUT_TT_ONLY_PRECIS,              //（椎名コメント）出力制度
		ANTIALIASED_QUALITY,             //（椎名コメント）文字品質
		FF_DONTCARE,                     //（椎名コメント）ピッチとファミリ
		TEXT(m_FontInfo[Font].pFontName),//--読み込んだフォントの名前(プロパティのタイトルで分かる)
		&m_pFont_Comment[Font]);         //（椎名コメント）表示するコメント

	// 可変長引数の処理-------
	va_list args;				 //可変長引数の引数リストを指定する（椎名コメント：可変長引数のなかに、%dならint、%fならfloat、%sならcharという情報が既に入っている）
	va_start(args, Text);		 //va_list を初期化--＞//可変長引数の一つ前の引数を指定
	vsprintf_s(aStr, Text, args);//書式指定文字列を使用して可変長引数から文字列を生成するための安全な関数（椎名コメント：これらの関数は、引数リストへのポインターを使用し、指定されたデータを書式指定して buffer が指すメモリに書き込みます。）
	va_end(args);				 //va_start マクロによって開始された可変長引数リストを終了するために使用

	// テキストの描画
	m_pFont_Comment[Font]->DrawText(NULL, aStr, -1, &rect, DT_LEFT | DT_WORDBREAK, RGBA);

	//使用例！！

	//	DrawTextSet(　座標　, フォントサイズ　, フォント名（ｈ.で作ったラベル的な）, カラー, "打ちたい文字(任意で%d.%f,%s)",(任意で変数));

	// printf風に動く(\nはまだ無理...)
}
