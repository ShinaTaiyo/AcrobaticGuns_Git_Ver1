//=======================================================================================
//
//６月４日：モデルを描画する[objectX.h]
//Author:ShinaTaiyo
//
//=======================================================================================
#ifndef _OBJECTXALIVE_H_
#define _OBJECTXALIVE_H_

//==============================================
//インクルード
//==============================================
#include "main.h"
#include "objectXMove.h"
//=======================================================================================

////=======================================================
////オブジェクトXアライブクラス
////=======================================================
//class CObjectXAlive : public CObjectXMove
//{
//public:
//	CObjectXAlive(int nPri = 0, bool bUseintPri = false, CObject::TYPE type = CObject::TYPE::NONE, CObject::OBJECTTYPE ObjType = CObject::OBJECTTYPE::OBJECTTYPE_X);                                      //コンストラクタ
//	~CObjectXAlive() override;                                             //デストラクタ
//	HRESULT Init() override;                                               //初期化処理
//	void Uninit() override;                                                //終了処理
//	void Update() override;                                                //更新処理
//	void Draw() override;                                                  //描画処理	
//	//======================================================
//	//体力関係
//	//======================================================
//	//ダメージを与える
//	virtual void SetDamage(int nDamage, int nHitStopTime);          //ダメージを与える
//
//	//回復する
//	void SetHeal(int nHeal, D3DXCOLOR col, float fWidth, float fHeight);                  //回復量を与える
//	//=================================================================================================================
//
//	//==========================================================
//	//エディタ関係
//	//==========================================================
//	//関数
//	void SaveInfoTxt(fstream& WritingFile) override;//テキストファイルに情報を保存するための関数
//	void ManagerChooseControlInfo() override;              //ステージマネージャーが情報を操作する
//	//=================================================================================================================
//protected:
//private:
//	//===================================
//	//エディタ関係
//	//===================================
//	//============================================================================================================
//};
////============================================================================================================
#endif
