//===================================================================================================================
//
//１１月１０日：プレイヤーのアクションモードクラスを作る[player_actionmode.cpp]
//Author:ShinaTaiyo
//
//===================================================================================================================

//===============================================================
//インクルード
//===============================================================
#include "player_actionmode.h"
#include "texture.h"
#include "calculation.h"
#include "debugproc.h"
#include "manager.h"
#include "collision.h"
#include "effect.h"
#include "meshorbit.h"
#include "attack.h"
#include "input.h"
#include "lockon.h"
#include "player.h"
//===================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove::CPlayerMove()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove::~CPlayerMove()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove::MoveProcess(CPlayer* pPlayer)
{
	const D3DXVECTOR3& Move = pPlayer->GetMove();
	D3DXVECTOR3 AddMove = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	bool bMove = false;//移動しているかどうか
	float fRotAim = 0.0f;
	bMove = CCalculation::CaluclationMove(true, AddMove, 10.0f, CCalculation::MOVEAIM_XZ, fRotAim);
	//CCalculation::CalculationCollectionRot2D(CalRot.y, m_fRotAim, 0.25f);

	pPlayer->SetUseInteria(true);
	pPlayer->SetUseGravity(true, CObjectXMove::GetNormalGravity());

	//CManager::GetInputJoypad()->GetLStickPress();
	if (bMove == true)
	{
		pPlayer->SetMove(AddMove + D3DXVECTOR3(0.0f, Move.y, 0.0f));
	}

}
//======================================================================================================================================================


//******************************************************************************************************************************************************
//プレイヤー普通移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Normal::CPlayerMove_Normal()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Normal::~CPlayerMove_Normal()
{
}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Normal::MoveProcess(CPlayer* pPlayer)
{
	CPlayerMove::MoveProcess(pPlayer);
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_PrepDive::CPlayerMove_PrepDive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_PrepDive::~CPlayerMove_PrepDive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_PrepDive::MoveProcess(CPlayer* pPlayer)
{
	CPlayerMove::MoveProcess(pPlayer);//通常移動

	CLockon* pLockon = pPlayer->GetLockOn();//ロックオンへのポインタ
	D3DXVECTOR3 Move = CCalculation::Calculation3DVec(pPlayer->GetPos(), pLockon->GetNearRayColObjPos(), 40.0f);

	CManager::GetDebugProc()->PrintDebugProc("移動量：%f %f %f\n", Move.x, Move.y, Move.z);
	if (CManager::GetInputJoypad()->GetRT_Trigger() == true)
	{//ダイブモードにチェンジ

		CPlayerMove_Dive* pPlayerMove_Dive = DBG_NEW CPlayerMove_Dive();//ダイブモードにチェンジ
		pPlayer->SetSuccessCollision(false);//判定状態を確定解除
		pPlayer->ChengeMoveMode(pPlayerMove_Dive);
		pPlayerMove_Dive->SetDiveMove(Move);//ダイブの移動量を設定する

		pPlayer->ChengeEffectMode(DBG_NEW CPlayerEffect_Dive());
		pPlayer->SetMove(Move);
		pPlayer->SetUseInteria(false);//慣性を使用しない
		pPlayer->SetUseGravity(false,CObjectXMove::GetNormalGravity());//重力を使用しない

		pPlayer->SetRot(pPlayer->GetRot() + D3DXVECTOR3(-0.4f, 0.0f, 0.0f));//向きを前に傾ける
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Dive::CPlayerMove_Dive() : m_DiveMove(D3DXVECTOR3(0.0f,0.0f,0.0f))
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Dive::~CPlayerMove_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Dive::MoveProcess(CPlayer* pPlayer)
{
	//狙った方向に飛び続ける
	pPlayer->SetMove(m_DiveMove);

	//CEffect::Create(CEffect::EFFECTTYPE::NORMAL, 60, 40.0f, 40.0f, pPlayer->GetPos(), D3DXCOLOR(1.0f, 0.0f, 1.0f, 1.0f));

	if (pPlayer->GetCollisionSuccess() == true)
	{//ダイブ時に判定したら移動モードと攻撃モードを通常に戻す
		pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dive());
		pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_PrepDive());
		pPlayer->SetRot(D3DXVECTOR3(-0.0f,pPlayer->GetRot().y, 0.0f));//向きを前に傾ける
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー移動できないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Dont::CPlayerMove_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Dont::~CPlayerMove_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Dont::MoveProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー攻撃できるクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Shot::CPlayerAttack_Shot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Shot::~CPlayerAttack_Shot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Shot::AttackProcess(CPlayer* pPlayer)
{
	CLockon* pLockon = pPlayer->GetLockOn();
	D3DXVECTOR3 ShotPos = pPlayer->GetPos() + D3DXVECTOR3(0.0f, pPlayer->GetVtxMax().y, 0.0f);
	D3DXVECTOR3 Move = CCalculation::Calculation3DVec(ShotPos, pLockon->GetNearRayColObjPos(), 20.0f);
	CAttackPlayer* pAttackPlayer = nullptr;//プレイヤー攻撃へのポインタ
	if (CManager::GetInputKeyboard()->GetTrigger(DIK_J) == true || CManager::GetInputJoypad()->GetRT_Repeat(6) == true)
	{
		pAttackPlayer = CAttackPlayer::Create(CAttack::ATTACKTYPE::BULLET, 60, ShotPos, pPlayer->GetRot(), Move, D3DXVECTOR3(1.0f, 1.0f, 1.0f));
		pAttackPlayer->SetUseInteria(false);
		pAttackPlayer->SetAutoSubLife(true);
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー攻撃できないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Dont::CPlayerAttack_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Dont::~CPlayerAttack_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Dont::AttackProcess(CPlayer* pPlayer)
{
	//
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ攻撃クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Dive::CPlayerAttack_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Dive::~CPlayerAttack_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Dive::AttackProcess(CPlayer* pPlayer)
{
	CAttackPlayer* pAttackPlayer = CAttackPlayer::Create(CAttack::ATTACKTYPE::EXPLOSION, 120, pPlayer->GetPos(), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f));

	pAttackPlayer->SetUseAddScale(D3DXVECTOR3(0.4f, 0.4f, 0.4f), true);
	pAttackPlayer->SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), 200, false, false);
	pAttackPlayer->SetUseRatioLifeAlpha(true);

	pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_PrepDive());
	pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());

	pPlayer->ChengeEffectMode(DBG_NEW CPlayerEffect_None());

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーエフェクトクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerEffect::CPlayerEffect()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerEffect::~CPlayerEffect()
{

}
//======================================================================================================================================================

//=====================================================================================================
//エフェクト処理
//=====================================================================================================
void CPlayerEffect::EffectProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブエフェクトクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerEffect_Dive::CPlayerEffect_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerEffect_Dive::~CPlayerEffect_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//エフェクト処理
//=====================================================================================================
void CPlayerEffect_Dive::EffectProcess(CPlayer* pPlayer)
{
	CMeshOrbit* pMeshOrbit = pPlayer->GetMeshOrbit();

	//縦にメッシュの軌跡を展開
	pMeshOrbit->SetPos1(pPlayer->GetPos());
	pMeshOrbit->SetPos2(pPlayer->GetPos() + D3DXVECTOR3(0.0f, pPlayer->GetVtxMax().y, 0.0f));

}
//======================================================================================================================================================