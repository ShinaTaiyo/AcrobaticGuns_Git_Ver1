//===================================================================================================================
//
//１１月１０日：プレイヤーのアクションモードクラスを作る[player_actionmode.cpp]
//Author:ShinaTaiyo
//
//===================================================================================================================

//===============================================================
//インクルード
//===============================================================
#include "player_actionmode.h"
#include "texture.h"
#include "calculation.h"
#include "debugproc.h"
#include "manager.h"
#include "collision.h"
#include "effect.h"
#include "enemy.h"
#include "meshorbit.h"
#include "attack.h"
#include "input.h"
#include "lockon.h"
#include "wire.h"
#include "player.h"
#include "particle.h"
#include "wire_head.h"
#include "camera.h"
//===================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove::CPlayerMove() : m_bIsLanding(false), m_bDodge(false)
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove::~CPlayerMove()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove::MoveProcess(CPlayer* pPlayer)
{
	if (m_bDodge == false)
	{//回避中なら絶対に通常移動はさせない
		const D3DXVECTOR3& Move = pPlayer->GetMove();
		D3DXVECTOR3 AddMove = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
		bool bMove = false;//移動しているかどうか
		float fRotAim = 0.0f;

		bMove = CCalculation::CaluclationMove(true, AddMove, 10.0f, CCalculation::MOVEAIM_XZ, fRotAim);
		pPlayer->SetRot(D3DXVECTOR3(pPlayer->GetRot().x, fRotAim, pPlayer->GetRot().z));
		//CCalculation::CalculationCollectionRot2D(CalRot.y, m_fRotAim, 0.25f);

		pPlayer->SetUseInteria(true, CObjectXMove::GetNormalInertia());
		pPlayer->SetUseGravity(true, CObjectXMove::GetNormalGravity());

		//CManager::GetInputJoypad()->GetLStickPress();
		if (bMove == true)
		{
			pPlayer->SetMove(AddMove + D3DXVECTOR3(0.0f, Move.y, 0.0f));
		}
	}
}
//======================================================================================================================================================

//=====================================================================================================
//ジャンプ処理
//=====================================================================================================
void CPlayerMove::JumpProcess(CPlayer* pPlayer)
{
	if (pPlayer->GetLanding())
	{//地面にいるならジャンプ
		pPlayer->SetUseGravity(true, 1.0f);
		if (CManager::GetInputJoypad()->GetTrigger(CInputJoypad::JOYKEY::A) || CManager::GetInputKeyboard()->GetTrigger(DIK_SPACE))
		{
			pPlayer->SetMove(D3DXVECTOR3(pPlayer->GetMove().x, 20.0f, pPlayer->GetMove().z));
		}
	}
}
//======================================================================================================================================================

//=====================================================================================================
//回避処理
//=====================================================================================================
void CPlayerMove::DodgeProcess(CPlayer* pPlayer)
{
	CInputJoypad* pInput = CManager::GetInputJoypad();
	if ((pInput->GetLT_Trigger() || CManager::GetInputKeyboard()->GetTrigger(DIK_LSHIFT)) && m_bDodge == false)
	{
		m_bDodge = true;
		pPlayer->SetMove(D3DXVECTOR3(pPlayer->GetMove().x * s_fACCELL_PARAM, pPlayer->GetMove().y, pPlayer->GetMove().z * s_fACCELL_PARAM));
		pPlayer->SetUseInteria(true, 0.1f);
	}
	float fAverageSpeed = (fabsf(pPlayer->GetMove().x) + fabsf(pPlayer->GetMove().z)) / 2;

	if (fAverageSpeed < 0.51f && m_bDodge == true)
	{
		m_bDodge = false;
		pPlayer->SetUseInteria(true, CObjectXMove::GetNormalInertia());
	}
}

//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー普通移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Normal::CPlayerMove_Normal()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Normal::~CPlayerMove_Normal()
{
}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Normal::MoveProcess(CPlayer* pPlayer)
{
	CPlayerMove::MoveProcess(pPlayer);

	CPlayerMove::DodgeProcess(pPlayer);

	CPlayerMove::JumpProcess(pPlayer);
}
//======================================================================================================================================================


//******************************************************************************************************************************************************
//プレイヤーダイブ移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_PrepDive::CPlayerMove_PrepDive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_PrepDive::~CPlayerMove_PrepDive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_PrepDive::MoveProcess(CPlayer* pPlayer)
{
	CPlayerMove::MoveProcess(pPlayer);//通常移動

	CPlayerMove::DodgeProcess(pPlayer);//回避移動

	CPlayerMove::JumpProcess(pPlayer);//ジャンプ移動

	CWire* pWire = pPlayer->GetWire();
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead();
	CLockon* pLockon = pPlayer->GetLockOn();//ロックオンへのポインタ
	pWireHead->SetPos(pPlayer->GetPos());//ダイブ準備中なのでワイヤーヘッドをプレイヤーの位置に固定

	//CManager::GetDebugProc()->PrintDebugProc("移動量：%f %f %f\n", Move.x, Move.y, Move.z);
	if (CManager::GetInputJoypad()->GetRT_Trigger() && pLockon->GetSuccessRayCollision() ||
		CManager::GetInputMouse()->GetMouseLeftClickTrigger())
	{//ワイヤー発射移動モードにチェンジ
		CPlayerWireShot::StartWireShotProcess(pPlayer);
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//静的メンバ宣言
//=====================================================================================================
const float CPlayerMove_Dive::s_fCOLLISIONDIVEMOVELENGTH = 120.0f;//プレイヤーが発射したワイヤーヘッドと当たる距離

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Dive::CPlayerMove_Dive() : m_DiveMove(D3DXVECTOR3(0.0f,0.0f,0.0f))
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Dive::~CPlayerMove_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Dive::MoveProcess(CPlayer* pPlayer)
{
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead();
	bool bInput = CManager::GetInputJoypad()->GetRT_Press();
	if (CManager::GetInputJoypad()->GetRT_Press() || CManager::GetInputMouse()->GetMouseLeftClickPress())
	{
		bInput = true;
	}
	pPlayer->SetMove(m_DiveMove);
	CCamera* pCamera = CManager::GetCamera();
	if (CCalculation::CalculationLength(pPlayer->GetPos(), pWireHead->GetPos()) < s_fCOLLISIONDIVEMOVELENGTH)
	{//ダイブ時に判定したら移動モードと攻撃モードを通常に戻す
		if (bInput == false)
		{//攻撃→射撃モード
			pCamera->SetRot(D3DXVECTOR3(-D3DX_PI * 0.5f, pCamera->GetRot().y, 0.0f));//向きの基準を元に戻す
			pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dive());
			pPlayer->GetWire()->SetUseDraw(false);
			pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_PrepDive());
			pPlayer->SetRot(D3DXVECTOR3(0.0f, pCamera->GetRot().y, 0.0f));
			//pPlayer->SetRot(D3DXVECTOR3(0.0f, pPlayer->GetRot().y, 0.0f));//向きを前に傾ける
		}
		else
		{//引っ付き→ダイブ
			//pPlayer->SetRot(pPlayer->GetRot());
			pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_Stuck(pPlayer));
			pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());
		}
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//引っ付き移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Stuck::CPlayerMove_Stuck(CPlayer* pPlayer) : m_NowPos(pPlayer->GetPos())
{
	CCamera* pCamera = CManager::GetCamera();
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead();
	pPlayer->SetPos(pPlayer->GetPos() - pPlayer->GetMove());
	//pCamera->SetRot(D3DXVECTOR3(-pWireHead->GetRot().x,pWireHead->GetRot().y + D3DX_PI,0.0f));//カメラの向きを固定したワイヤーヘッドの逆側に！

	//==========================
	//カメラの向きを求める
	//==========================
	D3DXVECTOR3 ComRot = pWireHead->GetPos() - pPlayer->GetPos();
	D3DXVec3Normalize(&ComRot, &ComRot);
	float fYaw = atan2f(ComRot.x, ComRot.z);
	float fPitch = atan2f(ComRot.y, sqrtf(powf(ComRot.x, 2) + powf(ComRot.z, 2)));
	D3DXVECTOR3 ResultRot = D3DXVECTOR3(-fPitch - D3DX_PI * 0.5f, fYaw, 0.0f);//カメラの向きを調整する（前方向を基準にする）

	if (pCamera->GetRot().x > ResultRot.x - 0.5f && pCamera->GetRot().x < ResultRot.x + 0.5f &&
		pCamera->GetRot().y > ResultRot.y - 0.5f && pCamera->GetRot().y < ResultRot.y + 0.5f)
	{//現在のカメラの向きが目的の向きに近かったらダイブ先に合わせる
		//CParticle::SummonParticle(CParticle::TYPE::TYPE00_NORMAL, 10, 60, 30.0f, 30.0f, 100, 10, false, pPlayer->GetSenterPos(), D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), true);
		pCamera->ChengeState(DBG_NEW CCameraState_TurnAround(D3DXVECTOR3(-pWireHead->GetRot().x, pWireHead->GetRot().y + D3DX_PI, 0.0f), 0.15f));
	}
	//==============================================================================================
}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Stuck::~CPlayerMove_Stuck()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Stuck::MoveProcess(CPlayer* pPlayer)
{
	pPlayer->SetMove(D3DXVECTOR3(0.0f, 0.0f, 0.0f));

	//*変数宣言
	CCamera* pCamera = CManager::GetCamera(); // カメラへのポインタ
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead(); // ワイヤーヘッドへのポインタ
	D3DXVECTOR3 WireHeadRot = pWireHead->GetRot(); // ワイヤーヘッドの向き（オイラー角）
	CWire* pWire = pPlayer->GetWire();
	CLockon* pLockon = pPlayer->GetLockOn();//ロックオンへのポインタ

	pWireHead->SetPos(pPlayer->GetPos());//ダイブ準備中なのでワイヤーヘッドをプレイヤーの位置に固定
	//pPlayer->SetRot(D3DXVECTOR3(pCamera->GetRot().x + D3DX_PI,-pCamera->GetRot().y,0.0f));//向きをカメラに合わせる
    CManager::GetDebugProc()->PrintDebugProc("ロックオンのレイが当たっているかどうか：%d\n",pLockon->GetSuccessRayCollision());
	if ((CManager::GetInputJoypad()->GetRT_Trigger() || CManager::GetInputMouse()->GetMouseLeftClickTrigger()) && pLockon->GetSuccessRayCollision() == true)
	{//ワイヤー発射移動モードにチェンジ
		CPlayerWireShot::StartWireShotProcess(pPlayer);
	}

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー移動できないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Dont::CPlayerMove_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Dont::~CPlayerMove_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Dont::MoveProcess(CPlayer* pPlayer)
{
	pPlayer->SetMove(D3DXVECTOR3(0.0f, pPlayer->GetMove().y, 0.0f));
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー攻撃できるクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//静的メンバ宣言
//=====================================================================================================
const float CPlayerAttack_Shot::s_fNORMAL_SHOTSPEED = 50.0f;

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Shot::CPlayerAttack_Shot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Shot::~CPlayerAttack_Shot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Shot::AttackProcess(CPlayer* pPlayer)
{
	CLockon* pLockon = pPlayer->GetLockOn();
	D3DXVECTOR3 ShotPos = pPlayer->GetPos() + D3DXVECTOR3(0.0f, pPlayer->GetVtxMax().y, 0.0f);
	D3DXVECTOR3 Move = CCalculation::Calculation3DVec(ShotPos, pLockon->GetNearRayColObjPos(), s_fNORMAL_SHOTSPEED);
	CAttackPlayer* pAttackPlayer = nullptr;//プレイヤー攻撃へのポインタ
	if (CManager::GetInputKeyboard()->GetTrigger(DIK_J) == true || CManager::GetInputJoypad()->GetRT_Repeat(4) == true ||
		CManager::GetInputMouse()->GetMouseLeftClickRepeat(4) == true)
	{
		pAttackPlayer = CAttackPlayer::Create(CAttack::ATTACKTYPE::BULLET,CAttack::TARGETTYPE::ENEMY,CAttack::COLLISIONTYPE::SQUARE,5,5,60,ShotPos, pPlayer->GetRot(), Move, D3DXVECTOR3(1.0f, 1.0f, 1.0f));
		pAttackPlayer->SetUseInteria(false, CObjectXMove::GetNormalInertia());
		pAttackPlayer->SetAutoSubLife(true);
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー攻撃できないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Dont::CPlayerAttack_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Dont::~CPlayerAttack_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Dont::AttackProcess(CPlayer* pPlayer)
{
	//
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ攻撃クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Dive::CPlayerAttack_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Dive::~CPlayerAttack_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Dive::AttackProcess(CPlayer* pPlayer)
{
	CAttackPlayer* pAttackPlayer = CAttackPlayer::Create(CAttack::ATTACKTYPE::EXPLOSION,CAttack::TARGETTYPE::ENEMY,CAttack::COLLISIONTYPE::SQUARE,2,0,120, pPlayer->GetPos(), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.1f, 0.1f, 0.1f),
		D3DXVECTOR3(1.0f, 1.0f, 1.0f));

	pAttackPlayer->SetUseAddScale(D3DXVECTOR3(0.4f, 0.4f, 0.4f), true);
	pAttackPlayer->SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), 200, false, false);
	pAttackPlayer->SetUseRatioLifeAlpha(true);
	pAttackPlayer->SetCollisionRelease(false);

	pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_PrepDive());
	pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());

	pPlayer->ChengeEffectMode(DBG_NEW CPlayerEffect_None());

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーエフェクトクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerEffect::CPlayerEffect()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerEffect::~CPlayerEffect()
{

}
//======================================================================================================================================================

//=====================================================================================================
//エフェクト処理
//=====================================================================================================
void CPlayerEffect::EffectProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブエフェクトクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerEffect_Dive::CPlayerEffect_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerEffect_Dive::~CPlayerEffect_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//エフェクト処理
//=====================================================================================================
void CPlayerEffect_Dive::EffectProcess(CPlayer* pPlayer)
{
	CMeshOrbit* pMeshOrbit = pPlayer->GetMeshOrbit();

	//縦にメッシュの軌跡を展開
	pMeshOrbit->SetPos1(pPlayer->GetPos());
	pMeshOrbit->SetPos2(pPlayer->GetPos() + D3DXVECTOR3(0.0f, pPlayer->GetVtxMax().y, 0.0f));

	//現在の位置にシリンダーを展開
	//pWire->SetPos(pPlayer->GetPos());

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーワイヤー発射中クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerWireShot::CPlayerWireShot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerWireShot::~CPlayerWireShot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤー発射処理
//=====================================================================================================
void CPlayerWireShot::WireShotProcess(CPlayer* pPlayer)
{
}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤーの発射を開始させる処理
//=====================================================================================================
void CPlayerWireShot::StartWireShotProcess(CPlayer* pPlayer)
{
	D3DXVECTOR3 Move = CCalculation::Calculation3DVec(pPlayer->GetPos(), pPlayer->GetLockOn()->GetNearRayColObjPos(), 60.0f);
	D3DXVECTOR3 Rot = pPlayer->GetLockOn()->GetNearRayColObjPos() - pPlayer->GetPos();
	D3DXVec3Normalize(&Rot, &Rot);
	float fYaw = atan2f(Rot.x, Rot.z);
	float fPitch = atan2f(Rot.y, sqrtf(powf(Rot.x, 2) + powf(Rot.z, 2)));
	fPitch *= -1;
	//ワイヤーの頭を飛ばす
	pPlayer->GetWire()->GetWireHead()->SetMove(Move);
	pPlayer->GetWire()->GetWireHead()->ResetCoolTime();//当たるまでのクールタイムをリセット
	pPlayer->GetWire()->GetWireHead()->SetUseInteria(false, CObjectXMove::GetNormalInertia());
	pPlayer->GetWire()->GetWireHead()->SetUseGravity(false, 1.0f);
	pPlayer->GetWire()->SetUseDraw(true);
	pPlayer->GetWire()->GetWireHead()->SetRot(D3DXVECTOR3(D3DX_PI * 0.5f + fPitch, fYaw, 0.0f));//Xの意味は、前を基準にするという意味
	pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_Dont());//移動モード「なし」
	pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());//攻撃モード「なし」
	pPlayer->ChengeWireShotMode(DBG_NEW CPlayerWireShot_Do());//ワイヤーショットモード「する」
	pPlayer->SetUseInteria(false, CObjectXMove::GetNormalInertia());//慣性を使用しない
	pPlayer->SetUseGravity(false, CObjectXMove::GetNormalGravity());//重力を使用しない
	pPlayer->SetMove(Move);

	//描画を復活させる
	pPlayer->GetWire()->GetWireHead()->SetUseDraw(true);
	pPlayer->SetUseDraw(true);

	//ワイヤーの更新を復活させる
	pPlayer->GetWire()->SetUseUpdate(true);
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーワイヤー発射するクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerWireShot_Do::CPlayerWireShot_Do()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerWireShot_Do::~CPlayerWireShot_Do()
{

}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤー発射処理
//=====================================================================================================
void CPlayerWireShot_Do::WireShotProcess(CPlayer* pPlayer)
{
	//*変数宣言
	CWire* pWire = pPlayer->GetWire();
	CWireHead* pWireHead = pWire->GetWireHead();

	FrightenedEnemy(pPlayer);//この処理の途中で狙った敵は怯える

	pPlayer->SetMove(D3DXVECTOR3(0.0f, 0.0f, 0.0f));//ワイヤー発射中は動きを止める
	if (pWireHead->GetSuccessCollision() == true)
	{//ワイヤーがどれかのオブジェクトに当たったら
		pPlayer->ChengeWireShotMode(DBG_NEW CPlayerWireShot_Dont());//ワイヤー発射モード「なし」
		pPlayer->ChengeEffectMode(DBG_NEW CPlayerEffect_Dive());    //エフェクトモード「ダイブ」
		
		DecisionCameraRot(pPlayer);//カメラの向きを決める

		pWireHead->SetMove(D3DXVECTOR3(0.0f, 0.0f, 0.0f));//ワイヤーヘッドの移動を止める
		D3DXVECTOR3 Move = CCalculation::Calculation3DVec(pPlayer->GetPos(), pWireHead->GetPos(),40.0f);
		CPlayerMove_Dive * pPlayerMove_Dive = DBG_NEW CPlayerMove_Dive();//ダイブを開始する
		pPlayerMove_Dive->SetDiveMove(Move);
        pPlayer->ChengeMoveMode(pPlayerMove_Dive);
		pPlayer->SetMove(Move);
        //pPlayerMove_Dive->SetDiveMove(Move);//ダイブの移動量を設定する
        pPlayer->SetSuccessCollision(false);//判定状態を確定解除   
	}
}
//======================================================================================================================================================

//=====================================================================================================
//敵を怯えさせる処理
//=====================================================================================================
void CPlayerWireShot_Do::FrightenedEnemy(CPlayer* pPlayer)
{
	CObject* pObj = CObject::GetTopObject(static_cast<int>(CObject::TYPE::ENEMY));

 	const D3DXVECTOR3 & FrontPos = pPlayer->GetLockOn()->GetFrontPos();
	const D3DXVECTOR3& Ray = pPlayer->GetLockOn()->GetNowRay();
	D3DXVECTOR3 CollisionPos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	while (pObj != nullptr)
	{
		CObject* pNext = pObj->GetNextObject();

		CEnemy* pEnemy = static_cast<CEnemy*>(pObj);
		if (pEnemy->GetEnemyType() == CEnemy::ENEMYTYPE::DIVEWEAK)
		{//ダイブに弱い敵だけ処理をする6
			if (CCollision::RayIntersectsAABBCollisionPos(FrontPos, Ray, pEnemy->GetPos() + pEnemy->GetVtxMin(), pEnemy->GetPos() + pEnemy->GetVtxMax(), CollisionPos))
			{
				pEnemy->ChengeMove(DBG_NEW CEnemyMove_Frightened(pEnemy, pEnemy->GetPos(),90));//1秒間怯え状態にする
			}
		}
		pObj = pNext;//リストを次に進める
	}
}
//======================================================================================================================================================

//=====================================================================================================
//カメラの向きを決める処理
//=====================================================================================================
void CPlayerWireShot_Do::DecisionCameraRot(CPlayer* pPlayer)
{
	CWire* pWire = pPlayer->GetWire();
	CWireHead* pWireHead = pWire->GetWireHead();
	CCamera* pCamera = CManager::GetCamera();

	//==========================
    //カメラの向きを求める
    //==========================
	D3DXVECTOR3 ComRot = pWireHead->GetPos() - pPlayer->GetPos();
	D3DXVec3Normalize(&ComRot, &ComRot);
	float fYaw = atan2f(ComRot.x, ComRot.z);
	float fPitch = atan2f(ComRot.y, sqrtf(powf(ComRot.x, 2) + powf(ComRot.z, 2)));
	D3DXVECTOR3 ResultRot = D3DXVECTOR3(-fPitch - D3DX_PI * 0.5f, fYaw, 0.0f);//カメラの向きを調整する（前方向を基準にする）

	if (pCamera->GetRot().x > ResultRot.x - 0.5f && pCamera->GetRot().x < ResultRot.x + 0.5f &&
		pCamera->GetRot().y > ResultRot.y - 0.5f && pCamera->GetRot().y < ResultRot.y + 0.5f)
	{//現在のカメラの向きが目的の向きに近かったらダイブ先に合わせる
		//CParticle::SummonParticle(CParticle::TYPE::TYPE00_NORMAL, 10, 60, 30.0f, 30.0f, 100, 10, false, pPlayer->GetSenterPos(), D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), true);
		pCamera->ChengeState(DBG_NEW CCameraState_TurnAround(D3DXVECTOR3(-fPitch - D3DX_PI * 0.5f, fYaw, 0.0f), 0.1f));
	}
	//==============================================================================================

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーワイヤー発射しないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerWireShot_Dont::CPlayerWireShot_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerWireShot_Dont::~CPlayerWireShot_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤー発射処理
//=====================================================================================================
void CPlayerWireShot_Dont::WireShotProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================