//===================================================================================================================
//
//１１月１０日：プレイヤーのアクションモードクラスを作る[player_actionmode.cpp]
//Author:ShinaTaiyo
//
//===================================================================================================================

//===============================================================
//インクルード
//===============================================================
#include "player_actionmode.h"
#include "texture.h"
#include "calculation.h"
#include "debugproc.h"
#include "manager.h"
#include "collision.h"
#include "effect.h"
#include "meshorbit.h"
#include "attack.h"
#include "input.h"
#include "lockon.h"
#include "wire.h"
#include "player.h"
#include "particle.h"
#include "wire_head.h"
#include "camera.h"
//===================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove::CPlayerMove()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove::~CPlayerMove()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove::MoveProcess(CPlayer* pPlayer)
{
	const D3DXVECTOR3& Move = pPlayer->GetMove();
	D3DXVECTOR3 AddMove = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	bool bMove = false;//移動しているかどうか
	float fRotAim = 0.0f;
	bMove = CCalculation::CaluclationMove(true, AddMove, 10.0f, CCalculation::MOVEAIM_XZ, fRotAim);
	//CCalculation::CalculationCollectionRot2D(CalRot.y, m_fRotAim, 0.25f);

	pPlayer->SetUseInteria(true);
	pPlayer->SetUseGravity(true, CObjectXMove::GetNormalGravity());

	//CManager::GetInputJoypad()->GetLStickPress();
	if (bMove == true)
	{
		pPlayer->SetMove(AddMove + D3DXVECTOR3(0.0f, Move.y, 0.0f));
	}

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー普通移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Normal::CPlayerMove_Normal() : m_bIsLanding(false)
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Normal::~CPlayerMove_Normal()
{
}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Normal::MoveProcess(CPlayer* pPlayer)
{
	CPlayerMove::MoveProcess(pPlayer);
	JumpProcess(pPlayer);
}
//======================================================================================================================================================

//=====================================================================================================
//ジャンプ処理
//=====================================================================================================
void CPlayerMove_Normal::JumpProcess(CPlayer* pPlayer)
{
	if (pPlayer->GetPos().y <= 0.0f)
	{
		pPlayer->SetPos(D3DXVECTOR3(pPlayer->GetPos().x, 0.0f, pPlayer->GetPos().z));
		m_bIsLanding = true;
	}
	else
	{
		m_bIsLanding = false;
	}

	if (m_bIsLanding == true || pPlayer->GetExtrusionCollisionSquareY() == true)
	{
		pPlayer->SetUseGravity(true, 0.01f);
		if (CManager::GetInputJoypad()->GetTrigger(CInputJoypad::JOYKEY::A) == true)
		{
			pPlayer->SetMove(D3DXVECTOR3(pPlayer->GetMove().x, 10.0f, pPlayer->GetMove().z));
		}
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_PrepDive::CPlayerMove_PrepDive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_PrepDive::~CPlayerMove_PrepDive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_PrepDive::MoveProcess(CPlayer* pPlayer)
{
	CPlayerMove::MoveProcess(pPlayer);//通常移動
	CWire* pWire = pPlayer->GetWire();
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead();
	CLockon* pLockon = pPlayer->GetLockOn();//ロックオンへのポインタ
	//CManager::GetDebugProc()->PrintDebugProc("Yaw : %f、Pitch : %f\n", fYaw, fPitch);

	pWireHead->SetPos(pPlayer->GetPos());//ダイブ準備中なのでワイヤーヘッドをプレイヤーの位置に固定

	//CManager::GetDebugProc()->PrintDebugProc("移動量：%f %f %f\n", Move.x, Move.y, Move.z);
	if (CManager::GetInputJoypad()->GetRT_Trigger() == true)
	{//ワイヤー発射移動モードにチェンジ

		D3DXVECTOR3 Move = CCalculation::Calculation3DVec(pPlayer->GetPos(), pLockon->GetNearRayColObjPos(), 40.0f);
		D3DXVECTOR3 Rot = pLockon->GetNearRayColObjPos() - pPlayer->GetPos();
		D3DXVec3Normalize(&Rot, &Rot);
		float fYaw = atan2f(Rot.x, Rot.z);
		float fPitch = atan2f(Rot.y, sqrtf(powf(Rot.x, 2) + powf(Rot.z, 2)));
		fPitch *= -1;
		//ワイヤーの頭を飛ばす
		pPlayer->GetWire()->GetWireHead()->SetMove(Move);
		pPlayer->GetWire()->GetWireHead()->ResetCoolTime();//当たるまでのクールタイムをリセット
		pPlayer->GetWire()->GetWireHead()->SetUseInteria(false);
		pPlayer->GetWire()->GetWireHead()->SetUseGravity(false,1.0f);
		pPlayer->GetWire()->SetUseDraw(true);
		pPlayer->GetWire()->GetWireHead()->SetRot(D3DXVECTOR3(D3DX_PI * 0.5f + fPitch,fYaw,0.0f));
		pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_Dont());//移動モード「なし」
		pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());//攻撃モード「なし」
		pPlayer->ChengeWireShotMode(DBG_NEW CPlayerWireShot_Do());//ワイヤーショットモード「する」
		pPlayer->SetUseInteria(false);//慣性を使用しない
		pPlayer->SetUseGravity(false,CObjectXMove::GetNormalGravity());//重力を使用しない
		pPlayer->SetRot(pPlayer->GetRot() + D3DXVECTOR3(-0.4f, 0.0f, 0.0f));//向きを前に傾ける

		pWire->SetUseUpdate(true);
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Dive::CPlayerMove_Dive() : m_DiveMove(D3DXVECTOR3(0.0f,0.0f,0.0f))
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Dive::~CPlayerMove_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Dive::MoveProcess(CPlayer* pPlayer)
{
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead();
	bool bInput = CManager::GetInputJoypad()->GetRT_Press();
	pPlayer->SetMove(m_DiveMove);
	CCamera* pCamera = CManager::GetCamera();

	if (CCalculation::CalculationLength(pPlayer->GetPos(), pWireHead->GetPos()) < 50.0f)
	{//ダイブ時に判定したら移動モードと攻撃モードを通常に戻す
		if (bInput == false)
		{
			pCamera->SetRot(D3DXVECTOR3(-D3DX_PI * 0.5f, pCamera->GetRot().y, 0.0f));//向きの基準を元に戻す
			pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dive());
			pPlayer->GetWire()->SetUseDraw(false);
			pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_PrepDive());
			pPlayer->SetRot(D3DXVECTOR3(0.0f, pCamera->GetRot().y, 0.0f));
			//pPlayer->SetRot(D3DXVECTOR3(0.0f, pPlayer->GetRot().y, 0.0f));//向きを前に傾ける
		}
		else
		{
			//pPlayer->SetRot(pPlayer->GetRot());
			pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_Stuck(pPlayer));
			pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());
		}
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//引っ付き移動クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Stuck::CPlayerMove_Stuck(CPlayer* pPlayer) : m_NowPos(pPlayer->GetPos())
{
	CCamera* pCamera = CManager::GetCamera();
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead();
	pPlayer->SetPos(pPlayer->GetPos() - pPlayer->GetMove());
	pCamera->SetRot(pWireHead->GetRot());
}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Stuck::~CPlayerMove_Stuck()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Stuck::MoveProcess(CPlayer* pPlayer)
{
	pPlayer->SetMove(D3DXVECTOR3(0.0f, 0.0f, 0.0f));

	CCamera* pCamera = CManager::GetCamera(); // カメラへのポインタ
	CWireHead* pWireHead = pPlayer->GetWire()->GetWireHead(); // ワイヤーヘッドへのポインタ
	D3DXVECTOR3 WireHeadRot = pWireHead->GetRot(); // ワイヤーヘッドの向き（オイラー角）

	CWire* pWire = pPlayer->GetWire();
	CLockon* pLockon = pPlayer->GetLockOn();//ロックオンへのポインタ

	pWireHead->SetPos(pPlayer->GetPos());//ダイブ準備中なのでワイヤーヘッドをプレイヤーの位置に固定
	pPlayer->SetRot(D3DXVECTOR3(-pCamera->GetRot().x + D3DX_PI,pCamera->GetRot().y,0.0f));//向きをカメラに合わせる
    //CManager::GetDebugProc()->PrintDebugProc("移動量：%f %f %f\n", Move.x, Move.y, Move.z);
	if (CManager::GetInputJoypad()->GetRT_Trigger() == true)
	{//ワイヤー発射移動モードにチェンジ

		D3DXVECTOR3 Move = CCalculation::Calculation3DVec(pPlayer->GetPos(), pLockon->GetNearRayColObjPos(), 40.0f);
		D3DXVECTOR3 Rot = pLockon->GetNearRayColObjPos() - pPlayer->GetPos();
		D3DXVec3Normalize(&Rot, &Rot);
		float fYaw = atan2f(Rot.x, Rot.z);
		float fPitch = atan2f(Rot.y, sqrtf(powf(Rot.x, 2) + powf(Rot.z, 2)));
		fPitch *= -1;
		//ワイヤーの頭を飛ばす
		pPlayer->GetWire()->GetWireHead()->SetMove(Move);
		pPlayer->GetWire()->GetWireHead()->ResetCoolTime();//当たるまでのクールタイムをリセット
		pPlayer->GetWire()->GetWireHead()->SetUseInteria(false);
		pPlayer->GetWire()->GetWireHead()->SetUseGravity(false, 1.0f);
		pPlayer->GetWire()->SetUseDraw(true);
		pPlayer->GetWire()->GetWireHead()->SetRot(D3DXVECTOR3(D3DX_PI * 0.5f + fPitch, fYaw, 0.0f));
		pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_Dont());//移動モード「なし」
		pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());//攻撃モード「なし」
		pPlayer->ChengeWireShotMode(DBG_NEW CPlayerWireShot_Do());//ワイヤーショットモード「する」
		pPlayer->SetUseInteria(false);//慣性を使用しない
		pPlayer->SetUseGravity(false, CObjectXMove::GetNormalGravity());//重力を使用しない
		CCamera* pCamera = CManager::GetCamera();
		pPlayer->SetMove(Move);

		pCamera->SetCustomMode(false);

		//描画を復活させる
		pPlayer->GetWire()->GetWireHead()->SetUseDraw(true);
		pPlayer->SetUseDraw(true);

		//ワイヤーの更新を復活させる
		pWire->SetUseUpdate(true);
	}

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー移動できないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerMove_Dont::CPlayerMove_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerMove_Dont::~CPlayerMove_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//移動処理
//=====================================================================================================
void CPlayerMove_Dont::MoveProcess(CPlayer* pPlayer)
{
	pPlayer->SetMove(D3DXVECTOR3(0.0f, pPlayer->GetMove().y, 0.0f));
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー攻撃できるクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Shot::CPlayerAttack_Shot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Shot::~CPlayerAttack_Shot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Shot::AttackProcess(CPlayer* pPlayer)
{
	CLockon* pLockon = pPlayer->GetLockOn();
	D3DXVECTOR3 ShotPos = pPlayer->GetPos() + D3DXVECTOR3(0.0f, pPlayer->GetVtxMax().y, 0.0f);
	D3DXVECTOR3 Move = CCalculation::Calculation3DVec(ShotPos, pLockon->GetNearRayColObjPos(), 40.0f);
	CAttackPlayer* pAttackPlayer = nullptr;//プレイヤー攻撃へのポインタ
	if (CManager::GetInputKeyboard()->GetTrigger(DIK_J) == true || CManager::GetInputJoypad()->GetRT_Repeat(6) == true)
	{
		pAttackPlayer = CAttackPlayer::Create(CAttack::ATTACKTYPE::BULLET,5,5,60,ShotPos, pPlayer->GetRot(), Move, D3DXVECTOR3(1.0f, 1.0f, 1.0f));
		pAttackPlayer->SetUseInteria(false);
		pAttackPlayer->SetAutoSubLife(true);
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤー攻撃できないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Dont::CPlayerAttack_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Dont::~CPlayerAttack_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Dont::AttackProcess(CPlayer* pPlayer)
{
	//
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブ攻撃クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerAttack_Dive::CPlayerAttack_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerAttack_Dive::~CPlayerAttack_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//攻撃処理
//=====================================================================================================
void CPlayerAttack_Dive::AttackProcess(CPlayer* pPlayer)
{
	CAttackPlayer* pAttackPlayer = CAttackPlayer::Create(CAttack::ATTACKTYPE::EXPLOSION,1,0,120, pPlayer->GetPos(), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.1f, 0.1f, 0.1f),
		D3DXVECTOR3(1.0f, 1.0f, 1.0f));

	pAttackPlayer->SetUseAddScale(D3DXVECTOR3(0.4f, 0.4f, 0.4f), true);
	pAttackPlayer->SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), 200, false, false);
	pAttackPlayer->SetUseRatioLifeAlpha(true);
	pAttackPlayer->SetCollisionRelease(false);

	pPlayer->ChengeMoveMode(DBG_NEW CPlayerMove_PrepDive());
	pPlayer->ChengeAttackMode(DBG_NEW CPlayerAttack_Dont());

	pPlayer->ChengeEffectMode(DBG_NEW CPlayerEffect_None());

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーエフェクトクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerEffect::CPlayerEffect()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerEffect::~CPlayerEffect()
{

}
//======================================================================================================================================================

//=====================================================================================================
//エフェクト処理
//=====================================================================================================
void CPlayerEffect::EffectProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーダイブエフェクトクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerEffect_Dive::CPlayerEffect_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerEffect_Dive::~CPlayerEffect_Dive()
{

}
//======================================================================================================================================================

//=====================================================================================================
//エフェクト処理
//=====================================================================================================
void CPlayerEffect_Dive::EffectProcess(CPlayer* pPlayer)
{
	CMeshOrbit* pMeshOrbit = pPlayer->GetMeshOrbit();

	//縦にメッシュの軌跡を展開
	pMeshOrbit->SetPos1(pPlayer->GetPos());
	pMeshOrbit->SetPos2(pPlayer->GetPos() + D3DXVECTOR3(0.0f, pPlayer->GetVtxMax().y, 0.0f));

	//現在の位置にシリンダーを展開
	//pWire->SetPos(pPlayer->GetPos());

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーワイヤー発射中クラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerWireShot::CPlayerWireShot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerWireShot::~CPlayerWireShot()
{

}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤー発射処理
//=====================================================================================================
void CPlayerWireShot::WireShotProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーワイヤー発射するクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerWireShot_Do::CPlayerWireShot_Do()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerWireShot_Do::~CPlayerWireShot_Do()
{

}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤー発射処理
//=====================================================================================================
void CPlayerWireShot_Do::WireShotProcess(CPlayer* pPlayer)
{
	CWire* pWire = pPlayer->GetWire();
	CWireHead* pWireHead = pWire->GetWireHead();
	//pWireHead->SetRot(CalcRot);
	if (pWireHead->GetSuccessCollision() == true)
	{//ワイヤーがどれかのオブジェクトに当たったら
		pPlayer->ChengeWireShotMode(DBG_NEW CPlayerWireShot_Dont());//ワイヤー発射モード「なし」
		pPlayer->ChengeEffectMode(DBG_NEW CPlayerEffect_Dive());    //エフェクトモード「ダイブ」

		pWireHead->SetMove(D3DXVECTOR3(0.0f, 0.0f, 0.0f));//ワイヤーヘッドの移動を止める
		D3DXVECTOR3 Move = CCalculation::Calculation3DVec(pPlayer->GetPos(), pWireHead->GetPos(),40.0f);
		CPlayerMove_Dive * pPlayerMove_Dive = DBG_NEW CPlayerMove_Dive();
		pPlayerMove_Dive->SetDiveMove(Move);
        pPlayer->ChengeMoveMode(pPlayerMove_Dive);
		pPlayer->SetMove(Move);
        //pPlayerMove_Dive->SetDiveMove(Move);//ダイブの移動量を設定する
        pPlayer->SetSuccessCollision(false);//判定状態を確定解除   
	}
}
//======================================================================================================================================================

//******************************************************************************************************************************************************
//プレイヤーワイヤー発射しないクラス
//******************************************************************************************************************************************************

//=====================================================================================================
//コンストラクタ
//=====================================================================================================
CPlayerWireShot_Dont::CPlayerWireShot_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//デストラクタ
//=====================================================================================================
CPlayerWireShot_Dont::~CPlayerWireShot_Dont()
{

}
//======================================================================================================================================================

//=====================================================================================================
//ワイヤー発射処理
//=====================================================================================================
void CPlayerWireShot_Dont::WireShotProcess(CPlayer* pPlayer)
{

}
//======================================================================================================================================================