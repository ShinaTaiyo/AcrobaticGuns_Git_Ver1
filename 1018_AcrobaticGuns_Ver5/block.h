//====================================================
//
//７月１０日：C++で基盤づくり[block.h]
//Author:ShinaTaiyo
//
//====================================================

#ifndef _BLOCK_H_  
#define _BLOCK_H_

//======================
//インクルード
//======================
#include "main.h"
#include "object2d.h"
#include "objectX.h"
#include "object.h"
//==========================================

//===================================
//マップのテキストファイルのマクロ
//===================================
#define MAP00_SENTRAL_TXT "data\\TEXTFILE\\Map\\Sentral.txt"

//==========================================

//==========================================
//ブロッククラス
//==========================================
class CBlock : public CObjectX
{
public:
	//===========================
	//ブロックの種類
	//===========================
    typedef enum
	{
		BLOCKTYPE00_NORMAL = 0,    //普通ブロック
		BLOCKTYPE_MAX
	}BLOCKTYPE;
	//======================================================================

	//===========================
	//マップの種類
	//===========================
	typedef enum
	{
		MAP00_SENTRAL = 0,
		MAP_MAX
	}MAPTYPE;
	//======================================================================

	CBlock();                 //コンストラクタ
	~CBlock() override;       //デストラクタ
	HRESULT Init() override;  //初期化処理
	void Uninit() override;   //終了処理
	void Update() override;   //更新処理
	void Draw() override;     //描画処理
	void SetDeath() override; //死亡フラグを設定
	static CBlock * Create(BLOCKTYPE type, int nLife,D3DXVECTOR3 pos,D3DXVECTOR3 rot,D3DXVECTOR3 scale);//ブロックを生成
	void ReleaseBlock();                //ブロックを消す
	BLOCKTYPE GetType();//ブロックの種類を取得する
	void Collision();                                                             //当たり判定を行う
	static void CollisionSquare(CObjectX * pObjX);                                //正方形の当たり判定を行う
	static void LandingCorrection(D3DXVECTOR3& Pos,CObject * pSaveObj,D3DXVECTOR3 VtxMin);              //第２、第３引数で指定したブロックの上に乗っている場合、位置を補正する
	static int GetNumFile() { return m_nNumFile; }                                                                 //ファイル数を取得する
	BLOCKTYPE GetBlockType() { return m_type; }                                                                    //ブロックのタイプを取得する
	bool GetbCollision() { return m_bCollision; }                                  //判定可能かどうかを取得する     
private:
	//======================================
	//静的メンバ
	//======================================
	static const int m_nMAX_FALLBLOCKRESPAWNCNT = 150;
	static const char* m_BLOCK_FILENAME[BLOCKTYPE_MAX];                            //ブロックのファイルネーム
	static const float m_fBLOCKCORRECTIONCOLLISION;                                //判定に余裕を持たせる量
	static int m_nNumFile;                                                         //ファイル数を格納する
	//======================================================================================================================

	//======================================
	//基本系
	//======================================
	BLOCKTYPE m_type;                                                              //ブロックの種類
	bool m_bCollision;                                                             //当たり判定をするかどうか
	//======================================================================================================================

	//======================================
	//ブロックとの押し出し判定用
	//======================================
	void ExtrusionCollisionX(CObjectX* pMyObjX,CBlock * pBlock);//X方向の押し出し判定を行う
	void ExtrusionCollisionY(CObjectX* pMyObjX, CBlock* pBlock);//Y方向の押し出し判定を行う
};

#endif
