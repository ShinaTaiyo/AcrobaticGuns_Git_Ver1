//===================================================================================================================
//
//１１月１７日：ワイヤーを作る[wire.cpp]
//Author:ShinaTaiyo
//
//===================================================================================================================

//===============================================================
//インクルード
//===============================================================
#include "wire.h"
#include "texture.h"
#include "renderer.h"
#include "manager.h"
//===================================================================================================================

//===============================================================
//デストラクタ
//===============================================================
const string CWire::s_WIRE_FILENAME[static_cast<int>(CWire::WIRETYPE::MAX)] =
{
	"data\\TEXTURE\\Wire\\LakeField_000.png"
};
//===================================================================================================================

//===============================================================
//コンストラクタ
//===============================================================
CWire::CWire(WIRETYPE WireType, float fRadius, float fHeight,int nNumDivsionXZ, 
	D3DXVECTOR3 Pos, D3DXVECTOR3 Rot, 
	int nNumDivisionY, int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : CMeshCylinder(fRadius,fHeight,nNumDivsionXZ,nNumDivisionY,
		Pos,Rot,
		nPri,bUseintPri,type,ObjType),m_Type(WireType)
{

}
//===================================================================================================================

//===============================================================
//デストラクタ
//===============================================================
CWire::~CWire()
{

}
//===================================================================================================================

//===============================================================
//初期化処理
//===============================================================
HRESULT CWire::Init()
{
	CMeshCylinder::Init();
	return S_OK;
}
//===================================================================================================================

//===============================================================
//終了処理
//===============================================================
void CWire::Uninit()
{
	CMeshCylinder::Uninit();
}
//===================================================================================================================

//===============================================================
//更新処理
//===============================================================
void CWire::Update()
{
	CMeshCylinder::Update();
}
//===================================================================================================================

//===============================================================
//描画処理
//===============================================================
void CWire::Draw()
{
	CMeshCylinder::Draw();
}
//===================================================================================================================

//===============================================================
//死亡フラグ設定処理
//===============================================================
void CWire::SetDeath()
{
	CObject::SetDeath();
}
//===================================================================================================================

//===============================================================
//生成処理
//===============================================================
CWire* CWire::Create(WIRETYPE Type, D3DXVECTOR3 Pos, D3DXVECTOR3 Rot, float fRadius, float fHeight, int nNumDivisionXZ, int nNumDivisionY)
{
	CTexture* pTexture = CManager::GetTexture();
	CWire* pWire = DBG_NEW CWire(Type, fRadius, fHeight, nNumDivisionXZ, Pos, Rot, nNumDivisionY);
	pWire->Init();//初期化処理
	pWire->SetTextureIndex(pTexture->Regist(s_WIRE_FILENAME[static_cast<int>(Type)]));
	pWire->BindTexture(pTexture->GetAddress(pWire->GetTextureIndex()));

	return pWire;
}
//===================================================================================================================