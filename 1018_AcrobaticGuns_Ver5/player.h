//====================================================
//
//７月４日：チャージ攻撃を実装する[player.h]
//Author:ShinaTaiyo
//
//====================================================

#ifndef _PLAYER_H_  
#define _PLAYER_H_

//======================
//インクルード
//======================
#include "main.h"
#include "objectXAlive.h"
#include "lockon.h"
#include "meshorbit.h"
#include "ui.h"
#include "player_actionmode.h"
#include "wire.h"
//==========================================

//===========================================
//プレイヤー3Dクラス
//===========================================
class CPlayer : public CObjectXAlive
{
public:
	CPlayer(CPlayerMove * pPlayerMove,CPlayerAttack * pPlayerAttack,CPlayerEffect * pPlayerEffect,CPlayerWireShot * pPlayer,
		int nPri = 0, bool bUseintPri = false, CObject::TYPE type = CObject::TYPE::PLAYER, CObject::OBJECTTYPE ObjType = CObject::OBJECTTYPE::OBJECTTYPE_X);                  //コンストラクタ
	~CPlayer();                 //デストラクタ
	HRESULT Init() override;    //初期化処理
	void Uninit() override;     //終了処理
	void Update() override;     //更新処理
	void Draw() override;       //描画処理
	void SetDeath() override;   //死亡フラグを設定
	static CPlayer * Create(D3DXVECTOR3 pos,D3DXVECTOR3 rot,D3DXVECTOR3 move,D3DXVECTOR3 Scale);
	CLockon* GetLockOn() { return m_pLockOn; }//ロックオンのインスタンスを取得

	//================================================
	//当たり判定
	//================================================
	void SetSuccessCollision(bool bSuccess) { m_bCollision = bSuccess; }//当たり判定が成功したかどうかを設定
	const bool& GetCollisionSuccess() const { return m_bCollision; }//当たり判定が成功したかどうかを取得
	//===============================================================================================
	
	//================================================
	//メッシュ
	//================================================
	CMeshOrbit* GetMeshOrbit() { return m_pMeshOrbit; }//軌跡を取得
	CWire* GetWire() { return m_pWire; }//ワイヤーを取得
	//===============================================================================================

	//================================================
	//モードチェンジ
	//================================================
	void ChengeMoveMode(CPlayerMove* pPlayerMove);//移動モードを変える
	void ChengeAttackMode(CPlayerAttack* pPlayerAttack);//攻撃モードを変える
	void ChengeEffectMode(CPlayerEffect* pPlayerEffect);//エフェクトモードを変える
	void ChengeWireShotMode(CPlayerWireShot* pPlayerWireShot);//ワイヤー発射モードを変える
	CPlayerWireShot* GetWireShotState() { return m_pWireShot; }//ワイヤー発射状態を取得
	//===============================================================================================
private:
	//================================================
	//アクションモード列挙型
	//================================================
	enum class ACTIONMODE
	{
		SHOT = 0,
		DIVE,
		MAX
	};
	//===============================================================================================

	//================================================
    //静的メンバ
    //================================================
	static constexpr float m_fNORMALATTACK_SPEED = 10.0f;//通常攻撃の移動量を設定
	//===============================================================================================

	//================================================
	//変数宣言
	//================================================
	float m_fRotAim;                    //目的の向き
	bool m_bCollision;                  //当たり判定が成功したかどうか

	//他クラスインスタンス
	CLockon* m_pLockOn;                 //ロックオンカーソルへのポインタ
	ACTIONMODE m_NowActionMode;         //現在のアクションモード
	CUi * m_pModeDisp;                  //モード表示UI
	CMeshOrbit* m_pMeshOrbit;           //軌跡
	CWire* m_pWire;                     //ワイヤー
	
	//行動状態
	CPlayerMove* m_pMove;               //移動処理
	CPlayerAttack* m_pAttack;           //攻撃処理
	CPlayerEffect* m_pEffect;           //エフェクト処理
	CPlayerWireShot* m_pWireShot;       //ワイヤーショット状態
	//===============================================================================================


	//================================================
	//プロトタイプ宣言
	//================================================

	//=============================
	//位置系
	//=============================
	void AdjustRot();//向き調整処理
	void AdjustPos();//位置を調整する
	//================================================

	//=============================
	//モードチェンジ
	//=============================
	void ActionModeChenge();//アクションモードを変更する
	//==============================================================================================

	//=============================
	//判定系
	//=============================
	void CollisionProcess();//当たり判定処理全般
	void CollisionBlock();//ブロックとの当たり判定処理
	//===============================================================================================

	//=============================
	//ジャンプ関係
	//=============================
	void JumpProcess();     //ジャンプ処理
	//===============================================================================================
};

#endif
