//=================================================================================================================
//
//２０２５年３月９日：コンポジットパターンを利用してUIに機能を追加する[ui_composite.cpp]
//Author:ShinaTaiyo
//
//=================================================================================================================

//=================================================================================================================
//インクルード
//=================================================================================================================
#include "ui_composite.h"
#include "ui.h"
#include "calculation.h"
//=================================================================================================================

//*****************************************************************************************************************
//コンポーネント
//*****************************************************************************************************************

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Component::CUIComposite_Component(CUi* pUi)
{
	//何もなし
}
//=============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Component::~CUIComposite_Component()
{
	//何もなし
}
//=============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Component::Update(CUi * pUi)
{
	//何もなし
}
//=============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Component::Draw(CUi* pUi)
{
	//何もなし
}
//=============================================================================================================================================

//*****************************************************************************************************************
//数字保持
//*****************************************************************************************************************

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Numeric::CUIComposite_Numeric(CUi* pUi, int nValue, float fWidth, float fHeight) : CUIComposite_Component(pUi)
{
	m_nValue = nValue;                                                         //数字を割り当てる
	m_fWidth = fWidth;                                                         //横幅の基準値
	m_fHeight = fHeight;                                                       //高さの基準値
	int nDigit = CCalculation::CalculationDigit(m_nValue);                     //桁数を取得
	if (m_nValue == 0)
	{//桁数を０にするわけにはいかないので、桁数を１とする
		nDigit = 1;
	}

	for (int nCnt = 0; nCnt < nDigit; nCnt++)
	{
		CNumber* pNumber = CNumber::Create(pUi->GetPos(), fWidth, fHeight);    //数字を生成
		int nNum = CCalculation::getDigit(m_nValue, nCnt);                     //桁数を取得
		pNumber->SetAnim(nNum);                                                //指定した桁の数値を取得する
		pNumber->SetUseDeath(false);                                           //死亡フラグを発動させない
		m_VecNum.push_back(pNumber);                                           //数字の動的配列に保存
	}

	SetFunction(CUIComposite_Component::UIFUNCTION::NUMERIC);//機能の種類を設定

}
//=============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Numeric::~CUIComposite_Numeric()
{
	for (auto it : m_VecNum)
	{
		if (it != nullptr)
		{
			it->SetUseDeath(true);//死亡フラグを使用する
			it->SetDeath();       //死亡フラグを設定
		}
	}

	m_VecNum.clear();             //クリアする
}
//=============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Numeric::Update(CUi* pUi)
{
	int nSize = m_VecNum.size();//桁数を取得
	int nCnt = 0;
	for (auto it = m_VecNum.begin(); it != m_VecNum.end(); it++, nCnt++)
	{//数字を横に並べ続ける
		(*it)->SetPos(pUi->GetPos() + D3DXVECTOR3(pUi->GetWidth() / 2 + (*it)->GetWidth() / 2 + (*it)->GetWidth() * (nSize - 1) - ((*it)->GetWidth() * nCnt), 0.0f, 0.0f));
	}
}
//=============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Numeric::Draw(CUi* pUI)
{
	//何もなし
}
//============================================================================================================================================

//=================================================================================================================
//数字を設定する
//=================================================================================================================
void CUIComposite_Numeric::SetValue(int nValue, CUi* pUi)
{
	//数値の動的配列の中身を全て破棄
	for (auto it = m_VecNum.begin(); it != m_VecNum.end(); ++it)
	{//数字を全部破棄
		if ((*it) != nullptr)
		{
			(*it)->SetUseDeath(true);
			(*it)->SetDeath();
			(*it) = nullptr;
		}
	}

	m_VecNum.clear();//メモリの中身を初期化

	m_nValue = nValue;//数値を格納
	int nDigit = CCalculation::CalculationDigit(m_nValue);//桁数を計算

	if (m_nValue == 0)
	{//桁数を０にするわけにはいかないので、桁数を１とする
		nDigit = 1;
	}

	//再び桁数分数値の表示を生成し動的配列に格納する
	for (int nCnt = 0; nCnt < nDigit; nCnt++)
	{
		CNumber* pNumber = CNumber::Create(pUi->GetPos(), m_fWidth, m_fHeight);
		int nNum = CCalculation::getDigit(m_nValue, nCnt);//指定した桁の数値を取得する
		pNumber->SetAnim(nNum);//アニメーションパターン
		pNumber->SetUseDeath(false);//死亡フラグを発動させない
		m_VecNum.push_back(pNumber);//動的配列に保存
	}
}
//============================================================================================================================================

//*****************************************************************************************************************
//ゲージ
//*****************************************************************************************************************

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Gauge::CUIComposite_Gauge(CUi* pUi, D3DXVECTOR3 GaugePos, D3DXCOLOR Col, CObject2D::POLYGONTYPE PolygonType, CGauge::GAUGETYPE GaugeType, float fMaxWidth, float fMaxHeight, int nValue, int nMaxValue) : CUIComposite_Component(pUi)
{
	m_pGauge = CGauge::Create(GaugeType, nMaxValue, fMaxWidth, fMaxHeight, GaugePos);//生成
	m_pGauge->SetPolygonType(PolygonType);                                           //ポリゴンの種類（中心点）を設定
	m_pGauge->SetParam(nValue);                                                      //パラメータを設定
	m_pGauge->SetColor(Col, false, 1.0f);                                            //色合い
	
	SetFunction(CUIComposite_Component::UIFUNCTION::GAUGE);//機能の種類を設定
}
//============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Gauge::~CUIComposite_Gauge()
{
	if (m_pGauge != nullptr)
	{//ゲージが存在したら
		m_pGauge->SetUseDeath(true);//ゲージの死亡フラグを使用する
		m_pGauge->SetDeath();       //ゲージの死亡フラグを設定する
		m_pGauge = nullptr;         //ゲージのポインタを初期化
	}
}
//============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Gauge::Update(CUi* pUi)
{

}
//============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Gauge::Draw(CUi* pUi)
{

}
//============================================================================================================================================

//*****************************************************************************************************************
//コンテナ
//*****************************************************************************************************************

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Container::CUIComposite_Container(CUi* pUi) : CUIComposite_Component(pUi)
{

}
//============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Container::~CUIComposite_Container()
{
	for (auto Child : m_Children)
	{//全ての機能の破棄
		if (Child != nullptr)
		{
			delete Child;
		}
	}

	m_Children.clear();
}
//============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Container::Update(CUi* pUi)
{
	for (auto Child : m_Children)
	{//全ての機能の更新処理
		Child->Update(pUi);
	}
}
//============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Container::Draw(CUi* pUi)
{
	for (auto Child : m_Children)
	{//全ての機能の描画処理
		Child->Draw(pUi);
	}
}
//============================================================================================================================================

//=================================================================================================================
//機能の追加
//=================================================================================================================
void CUIComposite_Container::Add(CUIComposite_Component* pComponent)
{
	m_Children.push_back(pComponent);//機能を追加
}
//============================================================================================================================================