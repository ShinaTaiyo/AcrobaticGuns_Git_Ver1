//===============================================================================
//
//２０２５年３月３１日：ポーズ処理を実装する[pausemanager.h]
//Author:ShinaTaiyo
//
//===============================================================================

#ifndef _PAUSEMANAGER_H_  
#define _PAUSEMANAGER_H_

//========================================
//インクルード
//========================================
#include "main.h"
#include "ui.h"
#include "object.h"
//===============================================================================

//========================================
//ポーズマネージャークラス
//========================================
class CPauseManager : public CObject
{
public:
	CPauseManager(int nPriority = 0, bool bUseintPriority = false, TYPE Type = TYPE::NONE, OBJECTTYPE ObjType = OBJECTTYPE::OBJECTTYPE_NONE);//コンストラクタ
	~CPauseManager() override;        //デストラクタ
	HRESULT Init() override;          //初期化処理
	void Uninit() override;           //終了処理
	void Update() override;           //更新処理
	void Draw() override;             //描画処理
	void SetDeath() override;         //死亡フラグ設定処理
	static CPauseManager* Create();   //生成処理
private:

	//===========================================
    //列挙型
    //===========================================
	enum class COMMANDTYPE
	{
		CONTINUE = 0,
		EXIT,
		MAX
	};//コマンド列挙型
	//=====================================================================================================================

	//===========================================
	//静的メンバ変数
	//===========================================

	//=====================================================================================================================

	//===========================================
	//変数
	//===========================================
	CUi* m_pCommandUi[static_cast<int>(COMMANDTYPE::MAX)] = {};//コマンドUI
	int m_nChooseCommandNum = 0;                               //選んでいるコマンドの番号

	//=====================================================================================================================
	
	//===========================================
	//関数
	//===========================================
	void ChooseCommand();                         //コマンド選択
	void ShowSelectedCommand();                   //選択したコマンドを表示する処理
	void ExecuteCommand();                        //コマンドを発動する処理
	//=====================================================================================================================
};
#endif